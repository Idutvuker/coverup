# This file was generated by AI
import json
from pathlib import Path

from coverup.test_report import parse_coverage_report, parse_test_report


def test_parse_coverage_report_parses_fields(tmp_path):
    coverage_data = {
        "files": {
            "pkg/module.py": {
                "missing_lines": [1, 2, 3],
                "summary": {"percent_covered": 75.0},
            }
        },
        "totals": {"percent_covered": 80.0},
    }
    cov_file = tmp_path / "coverage.json"
    cov_file.write_text(json.dumps(coverage_data))

    report = parse_coverage_report(cov_file)
    assert report.percent_covered == 80.0
    assert len(report.files) == 1
    fc = report.files[0]
    assert fc.file == Path("pkg/module.py")
    assert fc.missing_lines == [1, 2, 3]
    assert fc.percent_covered == 75.0


def test_parse_test_report_collects_failures_and_collectors(tmp_path):
    cov_data = {"files": {}, "totals": {"percent_covered": 12.34}}
    cov_file = tmp_path / "coverage.json"
    cov_file.write_text(json.dumps(cov_data))

    test_data = {
        "tests": [
            {"nodeid": "tests/sample_test.py::test_pass", "outcome": "passed"},
            {
                "nodeid": "tests/sample_test.py::test_fail",
                "outcome": "failed",
                "setup": {"longrepr": "setup error"},
                "call": {"longrepr": "call error"},
                "teardown": {},
            },
        ],
        "collectors": [
            {
                "nodeid": "tests/sample_test.py::collection",
                "outcome": "failed",
                "longrepr": "collector error",
            }
        ],
    }
    test_file = tmp_path / "report.json"
    test_file.write_text(json.dumps(test_data))

    report = parse_test_report(test_file, cov_file)

    assert report.passed is False
    expected_path = Path("tests/sample_test.py")
    errors = report.errors[expected_path]
    assert errors[0] == "setup error\ncall error"
    assert errors[1] == "collector error"

    assert len(report.tests) == 1
    failed = report.getFailedTests()
    assert len(failed) == 1
    assert report.coverage_report.percent_covered == 12.34